generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  
  login String
  pass String
  name String?
  email String?
  phone String?

  Role UserOnRole[]

  Form Form[]
  Content Content[]
  Images Image[]
}

model Role {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name String

  role Role? @relation("Parent", fields: [roleId], references: [id])
  roleId BigInt? @unique

  Role Role[] @relation("Parent")
  User UserOnRole[]
  Module Module[]
  Navigation Navigation[]
}

model UserOnRole {
  @@id([userId, roleId])

  user User @relation(fields: [userId], references: [id])
  userId BigInt

  role Role @relation(fields: [roleId], references: [id])
  roleId BigInt
}

model Module {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name String
  order Int @default(0)

  navigation Navigation? @relation(fields: [navigationId], references: [id])
  navigationId BigInt?

  role Role @relation(fields: [roleId], references: [id])
  roleId BigInt

  contents ModuleOnContent[]
}

model Content {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  content Json
  order Int @default(0)

  user User? @relation(fields: [userId], references: [id])
  userId BigInt?

  modules ModuleOnContent[]
}

model ModuleOnContent {
  @@id([moduleId, contentId])

  module Module @relation(fields: [moduleId], references: [id])
  moduleId BigInt

  content Content @relation(fields: [contentId], references: [id])
  contentId BigInt
}

model Image {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  code String
  path String
  extension String?
  order Int @default(0)
  status Statuses @default(ACTIVE)

  user User? @relation(fields: [userId], references: [id])
  userId BigInt?
}

model Navigation {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name String
  path String
  order Int @default(0)
  status Statuses @default(ACTIVE)

  parent Navigation? @relation("Hierrarhy", fields: [parentId], references: [id])
  parentId BigInt?

  role Role @relation(fields: [roleId], references: [id])
  roleId BigInt

  Navigation Navigation[] @relation("Hierrarhy")
  Module Module[]
}

model Form {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  userId BigInt

  format Json
  data Json
}

model Constant {
  id BigInt @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  type FormatTypes @default(TEXT)
  value Json
}

enum FormatTypes {
  STRING
  TEXT
  IMAGE
  NUMBER
  RADIO
  CHECKBOX
}

enum Statuses {
  ACTIVE
  STOP
}